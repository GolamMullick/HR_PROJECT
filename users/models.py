from django.db import models
from django.contrib.auth.models import User
from common_utils.base_entity import BaseEntityBasicAbstract
from erplicense.models import Modules, License, CompanyUsers as CU
from core.models import CompanyDatabase
from common_utils.file_manager import FileManager
from django.apps import apps


class Apps(models.Model):
    """Save licensed modules/app on user database"""
    module_id = models.IntegerField()
    name = models.CharField(unique=True, max_length=191)
    slug = models.CharField(unique=True, max_length=191)
    description = models.TextField(blank=True, null=True)
    status = models.BooleanField(default=True)

    @classmethod
    def load_on_migrate(cls, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Modules.objects.filter(id=license.module_id).first()
        app_instance = cls.objects.using(db.db_name).filter(module_id=module.id).first()
        if app_instance is None:
            app_instance = cls()
            app_instance.module_id = module.id
            app_instance.name = module.name
            app_instance.slug = module.slug
            app_instance.description = module.description
            app_instance.save(using=db.db_name)


class CompanyUsers(BaseEntityBasicAbstract):
    """Created/updated when a user included in a company module/app"""
    user_id = models.IntegerField()
    name = models.CharField(max_length=255)
    username = models.CharField(max_length=255, unique=True)
    email = models.CharField(max_length=255, unique=True)
    is_owner = models.BooleanField(default=False)

    @classmethod
    def load_on_migrate(cls, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        user = User.objects.filter(id=license.created_by_id).first()
        user_instance = cls.objects.using(db.db_name).filter(user_id=user.id).first()
        if user_instance is None:
            user_instance = cls()
            user_instance.user_id = user.id
            user_instance.name = user.first_name
            user_instance.username = user.username
            user_instance.email = user.email
            user_instance.is_owner = True
            user_instance.save(using=db.db_name)


class Permission(models.Model):
    """Permissions will be generated by system"""
    name = models.CharField(max_length=191)

    @classmethod
    def load_from_json(cls, json_file_path, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        permission_json_data = FileManager.read_json(json_file_path)
        permissions = permission_json_data.get('permissions', [])
        total_permissions = len(permissions)
        for i, permission in enumerate(permissions):
            name = permission['name']

            permission_instances = cls.objects.using(db.db_name).filter(name=name)
            if permission_instances.exists():
                permission_instance = permission_instances.using(db.db_name).first()
            else:
                permission_instance = cls()

            permission_instance.name = name
            permission_instance.save(using=db.db_name)


class Model(BaseEntityBasicAbstract):
    """Models will be auto migrated by system if the module is licensed"""
    name = models.CharField(max_length=191)
    app = models.ForeignKey(Apps, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('app', 'name')

    @classmethod
    def load_on_migrate(cls, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Apps.objects.using(db.db_name).filter(module_id=license.module_id).first()
        models = apps.all_models[module.slug]
        models.update(apps.all_models['users'])
        for m in models:
            model_instance = Model.objects.using(db.db_name).filter(app=module,
                                                                    name=m).first()
            if model_instance is None:
                model_instance = cls()

            model_instance.name = m
            model_instance.app = module
            model_instance.save(using=db.db_name)


class Department(BaseEntityBasicAbstract):
    """One non-deletable system generated named Owner, rest can be created by the user"""
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    short_name = models.CharField(max_length=25)
    app = models.ForeignKey(Apps, on_delete=models.CASCADE)
    created_by = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE, blank=True, null=True)

    class Meta:
        unique_together = ('app', 'short_name')

    @classmethod
    def load_from_json(cls, json_file_path, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Apps.objects.using(db.db_name).filter(module_id=license.module_id).first()
        department_json_data = FileManager.read_json(json_file_path)
        departments = department_json_data.get(module.slug, [])
        total_departments = len(departments)
        for i, department in enumerate(departments):
            name = department['name']
            description = department['description']
            short_name = department['short_name']

            department_instances = cls.objects.using(db.db_name).filter(short_name=short_name,
                                                                        app=module)
            if department_instances.exists():
                department_instance = department_instances.using(db.db_name).first()
            else:
                department_instance = cls()

            department_instance.name = name
            department_instance.description = description
            department_instance.short_name = short_name
            department_instance.app = module
            department_instance.save(using=db.db_name)


class Role(BaseEntityBasicAbstract):
    """One non-deletable system generated named Owner, rest can be created by the user"""
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    short_name = models.CharField(max_length=25)
    app = models.ForeignKey(Apps, on_delete=models.CASCADE)
    created_by = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE, blank=True, null=True)

    class Meta:
        unique_together = ('app', 'short_name')

    @classmethod
    def load_from_json(cls, json_file_path, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Apps.objects.using(db.db_name).filter(module_id=license.module_id).first()
        role_json_data = FileManager.read_json(json_file_path)
        roles = role_json_data.get(module.slug, [])
        total_roles = len(roles)
        for i, role in enumerate(roles):
            name = role['name']
            description = role['description']
            short_name = role['short_name']

            role_instances = cls.objects.using(db.db_name).filter(short_name=short_name,
                                                                  app=module)
            if role_instances.exists():
                role_instance = role_instances.using(db.db_name).first()
            else:
                role_instance = cls()

            role_instance.name = name
            role_instance.description = description
            role_instance.short_name = short_name
            role_instance.app = module
            role_instance.save(using=db.db_name)


class DepartmentModelPermission(BaseEntityBasicAbstract):
    """Basic permissions for Owner(non-removable), rest can be added by the user"""
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    model = models.ForeignKey(Model, on_delete=models.CASCADE)
    permission = models.ForeignKey(Permission, on_delete=models.CASCADE)
    created_by = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE, blank=True, null=True)

    class Meta:
        unique_together = ('department', 'model', 'permission')

    @classmethod
    def load_on_migrate(cls, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Apps.objects.using(db.db_name).filter(module_id=license.module_id).first()
        department = Department.objects.using(db.db_name).filter(short_name='owner',
                                                                 app=module).first()
        models = Model.objects.using(db.db_name).all()
        permissions = Permission.objects.using(db.db_name).all()

        for m in models:
            for p in permissions:
                dmp_instance = cls.objects.using(db.db_name).filter(department=department,
                                                                    model=m,
                                                                    permission=p).first()
                if dmp_instance is None:
                    dmp_instance = cls()

                dmp_instance.department = department
                dmp_instance.model = m
                dmp_instance.permission = p
                dmp_instance.save(using=db.db_name)


class DepartmentRoleModelPermission(BaseEntityBasicAbstract):
    """Basic permissions for Owner(non-removable), rest can be added by the user"""
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    model = models.ForeignKey(Model, on_delete=models.CASCADE)
    permission = models.ForeignKey(Permission, on_delete=models.CASCADE)
    created_by = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE, blank=True, null=True)

    class Meta:
        unique_together = ('department', 'role', 'model', 'permission')

    @classmethod
    def load_on_migrate(cls, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Apps.objects.using(db.db_name).filter(module_id=license.module_id).first()
        department = Department.objects.using(db.db_name).filter(short_name='owner',
                                                                 app=module).first()
        role = Role.objects.using(db.db_name).filter(short_name='super_user',
                                                     app=module).first()
        models = Model.objects.using(db.db_name).all()
        permissions = Permission.objects.using(db.db_name).all()

        for m in models:
            for p in permissions:
                drmp_instance = cls.objects.using(db.db_name).filter(department=department,
                                                                     role=role,
                                                                     model=m,
                                                                     permission=p).first()
                if drmp_instance is None:
                    drmp_instance = cls()

                drmp_instance.department = department
                drmp_instance.role = role
                drmp_instance.model = m
                drmp_instance.permission = p
                drmp_instance.save(using=db.db_name)


class Invitation(BaseEntityBasicAbstract):
    """User invitation to a specific module/app"""
    email = models.CharField(max_length=255)
    app = models.ForeignKey(Apps, on_delete=models.CASCADE)
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    invited_by = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE, null=True, blank=True)

    class Meta:
        unique_together = ('app', 'email', 'department', 'role')


class Member(BaseEntityBasicAbstract):
    """Users/members of a specific module/app"""
    app = models.ForeignKey(Apps, on_delete=models.CASCADE)
    user = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE)
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    role = models.ForeignKey(Role, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('app', 'user', 'department', 'role')

    @classmethod
    def load_on_migrate(cls, license_id):
        license = License.objects.filter(id=license_id).first()
        db = CompanyDatabase.objects.filter(company_id=license.company_id).first()
        module = Apps.objects.using(db.db_name).filter(module_id=license.module_id).first()
        dept = Department.objects.using(db.db_name).filter(short_name='owner', app=module).first()
        role = Role.objects.using(db.db_name).filter(short_name='super_user', app=module).first()
        user = CompanyUsers.objects.using(db.db_name).filter(is_owner=True).first()

        member_instance = Member(
            app=module,
            user=user,
            department=dept,
            role=role
        )
        member_instance.save(using=db.db_name)


class MemberPermission(BaseEntityBasicAbstract):
    """Permissions of a specific user"""
    member = models.ForeignKey(Member, on_delete=models.CASCADE)
    model = models.ForeignKey(Model, on_delete=models.CASCADE)
    permission = models.ForeignKey(Permission, on_delete=models.CASCADE)
    created_by = models.ForeignKey(CompanyUsers, on_delete=models.CASCADE,
                                   related_name='created_by', blank=True, null=True)

    class Meta:
        unique_together = ('member', 'model', 'permission')

